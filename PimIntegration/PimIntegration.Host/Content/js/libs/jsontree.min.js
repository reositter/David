/*! jsonTree v.0.1.3 author: Eric Ponce licence: MIT */
(function (e) { function t() { for (var e = 1; arguments.length > e; e++) for (var t in arguments[e]) arguments[e].hasOwnProperty(t) && (arguments[0][t] = arguments[e][t]); return arguments[0] } function n(e, t) { var a = e.match(s); return t = t || [], a ? ("#" === a[1] ? t.id = a[2] : "." === a[1] && (t.css = t.css || [], t.css.push(a[2])), n(o.call(e, a[0], ""), t)) : t.original = e, t } function a(e, n) { return this.json = e, this.labels = [], this.html = "", this.opt = t({}, l, n), this.init(), this } var l = { childLabel: "li", parentLabel: "ul", keyLabel: "span", keyTemplate: "%element%: " }, i = ["childLabel", "parentLabel", "keyLabel"], r = i.length, s = /(\.|\#)([^\.\#]+)/, o = String.prototype.replace; a.prototype = { init: function () { this.renderLabels(), this.walk(this.json) }, walk: function (e) { var t = this.labels, n = this.opt.keyTemplate, a = ""; this.html = function l(e) { a += t.parentLabel.openTag; for (var i in e) a += t.childLabel.openTag, a += t.keyLabel.openTag + o.call(n, "%element%", i) + t.keyLabel.closeTag, "object" == typeof e[i] ? l(e[i]) : a += e[i], a += t.childLabel.closeTag; return a += t.parentLabel.closeTag }(e) }, renderLabels: function () { for (var e = r - 1; e >= 0; e--) { var t = n(this.opt[i[e]]), a = t.id ? ' id="' + t.id + '"' : "", l = t.css ? ' class="' + t.css.join(" ") + '"' : ""; this.labels[i[e]] = { openTag: t.original ? "<" + t.original + a + l + ">" : "", closeTag: t.original ? "</" + t.original + ">" : "" } } } }, e.jsontree = function (e, t) { return new a(e, t).html } })(this);